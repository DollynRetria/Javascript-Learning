//1- Encapsulation / donn√©es priv√©es

//Masquer des variables √† l'ext√©rieur d‚Äôun objet ou d‚Äôune fonction.

function createCounter() {
  let count = 0; // variable "priv√©e"

  return {
    increment() {
      count++;
      return count;
    },
    reset() {
      count = 0;
    }
  };
}

const counter = createCounter();
console.log(counter.increment()); // 1
console.log(counter.increment()); // 2
counter.reset();
console.log(counter.increment()); // 1

//count n‚Äôest accessible que via les m√©thodes retourn√©es : s√©curit√© des donn√©es.

//==========================================================
//==========================================================


//2. Fonctions g√©n√©r√©es dynamiquement

function createMultiplier(factor) {
  return function(number) {
    return number * factor;
  };
}

const doubler = createMultiplier(2);
const tripler = createMultiplier(3);

console.log(doubler(5)); // 10
console.log(tripler(5)); // 15
//Chaque fonction g√©n√©r√©e garde en m√©moire sa propre valeur de factor.


//==========================================================
//==========================================================

//3. Maintenir un √©tat entre appels
//Par exemple : un g√©n√©rateur d‚ÄôID unique.

function createIdGenerator() {
  let id = 0;
  return function () {
    return ++id;
  };
}

const getId = createIdGenerator();
console.log(getId()); // 1
console.log(getId()); // 2
console.log(getId()); // 3

//L‚Äô√©tat de id est maintenu entre les appels.


//==========================================================
//==========================================================


//4. Fonctions dans des boucles (probl√®me r√©solu gr√¢ce aux closures)

function badLoop() {
  for (var i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 1000);
  }
}

badLoop(); // Affiche 3, 3, 3 ‚ùå

function goodLoop() {
  for (let i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 1000);
  }
}

goodLoop(); // Affiche 0, 1, 2 ‚úÖ



/*
Souhaites-tu un mini-projet utilisant des closures ? Par exemple : un gestionnaire de panier, une todo list encapsul√©e, ou autre ? >> oui

Cr√©er une fonction createCart() qui retourne un panier avec des m√©thodes :
addItem(nom, prix)

removeItem(nom)

getTotal()

listItems()

Les donn√©es du panier sont priv√©es, accessibles uniquement via les fonctions retourn√©es gr√¢ce aux closures.
*/

function createCart() {
  let items = []; // Donn√©es priv√©es (non accessibles depuis l‚Äôext√©rieur)

  return {
    addItem(name, price) {
      items.push({ name, price });
      console.log(`‚úîÔ∏è Ajout√© : ${name} (${price}‚Ç¨)`);
    },

    removeItem(name) {
      items = items.filter(item => item.name !== name);
      console.log(`‚ùå Retir√© : ${name}`);
    },

    getTotal() {
      return items.reduce((total, item) => total + item.price, 0);
    },

    listItems() {
      if (items.length === 0) {
        console.log("üõí Le panier est vide.");
      } else {
        console.log("üì¶ Contenu du panier :");
        items.forEach(item => console.log(`- ${item.name} : ${item.price}‚Ç¨`));
      }
    }
  };
}

const monPanier = createCart();

monPanier.addItem("Livre", 15);
monPanier.addItem("Stylo", 2);
monPanier.addItem("Casque audio", 45);

monPanier.listItems();

console.log("üí∞ Total :", monPanier.getTotal(), "‚Ç¨");

monPanier.removeItem("Stylo");
monPanier.listItems();

console.log("üí∞ Total apr√®s suppression :", monPanier.getTotal(), "‚Ç¨");








